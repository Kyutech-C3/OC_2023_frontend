/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.3 avatar.glb --types --shadows
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { useBox, useCylinder } from '@react-three/cannon'

type GLTFResult = GLTF & {
  nodes: {
    antenna: THREE.Mesh
    ear_L: THREE.Mesh
    ear_R: THREE.Mesh
    hair_front: THREE.Mesh
    neck: THREE.Mesh
    hair_top: THREE.Mesh
    bangs_in: THREE.Mesh
    eye: THREE.Mesh
    hair_back: THREE.Mesh
    hair_R: THREE.Mesh
    hair_L: THREE.Mesh
    bangs_out: THREE.Mesh
    hair_tail_base: THREE.Mesh
    hair_base_top: THREE.Mesh
    face: THREE.Mesh
    body_line: THREE.Mesh
    body: THREE.Mesh
    stomach: THREE.Mesh
    skirt_out: THREE.Mesh
    weast: THREE.Mesh
    skirt_in: THREE.Mesh
    skirt_edge: THREE.Mesh
    arm_joint_1: THREE.Mesh
    arm_1: THREE.Mesh
    arm_joint_2: THREE.Mesh
    arm_2_L: THREE.Mesh
    palm: THREE.Mesh
    C3: THREE.Mesh
    finger_1: THREE.Mesh
    finger_2: THREE.Mesh
    finger_3: THREE.Mesh
    finger_4: THREE.Mesh
    leg_1: THREE.Mesh
    leg_2: THREE.Mesh
    leg_joint_1: THREE.Mesh
    leg_joint_2: THREE.Mesh
    heel: THREE.Mesh
    arm_2_R: THREE.Mesh
  }
  materials: {
    マテリアル: THREE.MeshStandardMaterial
  }
}

export const Avatar = (props: JSX.IntrinsicElements['group']) => {
  const { nodes, materials } = useGLTF('/models/avatar.glb') as GLTFResult
  const [ref, api] = useCylinder(
    () => ({
      mass: 10,
      position: [0, 10, -10],
      args: [1, 1, 1.5, 8],
      type: `Dynamic`,
    }),
    useRef<THREE.Group>(null),
  );
  return (
    <group ref={ref} onClick={() => api.velocity.set(0, 5, 0)} {...props} dispose={null}>
      <mesh castShadow receiveShadow geometry={nodes.antenna.geometry} material={materials.マテリアル} rotation={[Math.PI / 2, 0, 0]} />
      <mesh castShadow receiveShadow geometry={nodes.ear_L.geometry} material={materials.マテリアル} rotation={[Math.PI / 2, 0, 0]} />
      <mesh castShadow receiveShadow geometry={nodes.ear_R.geometry} material={materials.マテリアル} rotation={[Math.PI / 2, 0, 0]} />
      <mesh castShadow receiveShadow geometry={nodes.hair_front.geometry} material={materials.マテリアル} rotation={[Math.PI / 2, 0, 0]} />
      <mesh castShadow receiveShadow geometry={nodes.neck.geometry} material={materials.マテリアル} rotation={[Math.PI / 2, 0, 0]} />
      <mesh castShadow receiveShadow geometry={nodes.hair_top.geometry} material={materials.マテリアル} rotation={[Math.PI / 2, 0, 0]} />
      <mesh castShadow receiveShadow geometry={nodes.bangs_in.geometry} material={materials.マテリアル} rotation={[Math.PI / 2, 0, 0]} />
      <mesh castShadow receiveShadow geometry={nodes.eye.geometry} material={materials.マテリアル} rotation={[Math.PI / 2, 0, 0]} />
      <mesh castShadow receiveShadow geometry={nodes.hair_back.geometry} material={materials.マテリアル} rotation={[Math.PI / 2, 0, 0]} />
      <mesh castShadow receiveShadow geometry={nodes.hair_R.geometry} material={materials.マテリアル} rotation={[Math.PI / 2, 0, 0]} />
      <mesh castShadow receiveShadow geometry={nodes.hair_L.geometry} material={materials.マテリアル} rotation={[Math.PI / 2, 0, 0]} />
      <mesh castShadow receiveShadow geometry={nodes.bangs_out.geometry} material={materials.マテリアル} rotation={[Math.PI / 2, 0, 0]} />
      <mesh castShadow receiveShadow geometry={nodes.hair_tail_base.geometry} material={materials.マテリアル} rotation={[Math.PI / 2, 0, 0]} />
      <mesh castShadow receiveShadow geometry={nodes.hair_base_top.geometry} material={materials.マテリアル} rotation={[Math.PI / 2, 0, 0]} />
      <mesh castShadow receiveShadow geometry={nodes.face.geometry} material={materials.マテリアル} rotation={[Math.PI / 2, 0, 0]} />
      <mesh castShadow receiveShadow geometry={nodes.body_line.geometry} material={materials.マテリアル} rotation={[Math.PI / 2, 0, 0]} />
      <mesh castShadow receiveShadow geometry={nodes.body.geometry} material={materials.マテリアル} rotation={[Math.PI / 2, 0, 0]} />
      <mesh castShadow receiveShadow geometry={nodes.stomach.geometry} material={materials.マテリアル} rotation={[Math.PI / 2, 0, 0]} />
      <mesh castShadow receiveShadow geometry={nodes.skirt_out.geometry} material={materials.マテリアル} rotation={[Math.PI / 2, 0, 0]} />
      <mesh castShadow receiveShadow geometry={nodes.weast.geometry} material={materials.マテリアル} rotation={[Math.PI / 2, 0, 0]} />
      <mesh castShadow receiveShadow geometry={nodes.skirt_in.geometry} material={materials.マテリアル} rotation={[Math.PI / 2, 0, 0]} />
      <mesh castShadow receiveShadow geometry={nodes.skirt_edge.geometry} material={materials.マテリアル} rotation={[Math.PI / 2, 0, 0]} />
      <mesh castShadow receiveShadow geometry={nodes.arm_joint_1.geometry} material={materials.マテリアル} rotation={[Math.PI / 2, 0, 0]} />
      <mesh castShadow receiveShadow geometry={nodes.arm_1.geometry} material={materials.マテリアル} rotation={[Math.PI / 2, 0, 0]} />
      <mesh castShadow receiveShadow geometry={nodes.arm_joint_2.geometry} material={materials.マテリアル} rotation={[Math.PI / 2, 0, 0]} />
      <mesh castShadow receiveShadow geometry={nodes.arm_2_L.geometry} material={materials.マテリアル} rotation={[Math.PI / 2, 0, 0]} />
      <mesh castShadow receiveShadow geometry={nodes.palm.geometry} material={materials.マテリアル} rotation={[Math.PI / 2, 0, 0]} />
      <mesh castShadow receiveShadow geometry={nodes.C3.geometry} material={materials.マテリアル} rotation={[Math.PI / 2, 0, 0]} />
      <mesh castShadow receiveShadow geometry={nodes.finger_1.geometry} material={materials.マテリアル} rotation={[Math.PI / 2, 0, 0]} />
      <mesh castShadow receiveShadow geometry={nodes.finger_2.geometry} material={materials.マテリアル} rotation={[Math.PI / 2, 0, 0]} />
      <mesh castShadow receiveShadow geometry={nodes.finger_3.geometry} material={materials.マテリアル} rotation={[Math.PI / 2, 0, 0]} />
      <mesh castShadow receiveShadow geometry={nodes.finger_4.geometry} material={materials.マテリアル} rotation={[Math.PI / 2, 0, 0]} />
      <mesh castShadow receiveShadow geometry={nodes.leg_1.geometry} material={materials.マテリアル} rotation={[Math.PI / 2, 0, 0]} />
      <mesh castShadow receiveShadow geometry={nodes.leg_2.geometry} material={materials.マテリアル} rotation={[Math.PI / 2, 0, 0]} />
      <mesh castShadow receiveShadow geometry={nodes.leg_joint_1.geometry} material={materials.マテリアル} rotation={[Math.PI / 2, 0, 0]} />
      <mesh castShadow receiveShadow geometry={nodes.leg_joint_2.geometry} material={materials.マテリアル} rotation={[Math.PI / 2, 0, 0]} />
      <mesh castShadow receiveShadow geometry={nodes.heel.geometry} material={materials.マテリアル} rotation={[Math.PI / 2, 0, 0]} />
      <mesh castShadow receiveShadow geometry={nodes.arm_2_R.geometry} material={materials.マテリアル} rotation={[Math.PI / 2, 0, 0]} />
    </group>
  )
}

useGLTF.preload('/models/avatar.glb')
